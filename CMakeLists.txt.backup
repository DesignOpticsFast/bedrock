cmake_minimum_required(VERSION 3.20)
project(Bedrock
  VERSION 0.0.1
  DESCRIPTION "AI-native optical design core"
  LANGUAGES CXX)

# ============================================================
# Toolchain / language / policies
# ============================================================
if(POLICY CMP0135)
  cmake_policy(SET CMP0135 NEW)
endif()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# ============================================================
# RPATH Configuration (CRITICAL FOR RUNTIME LINKING)
# ============================================================
# Don't skip RPATH for build tree
set(CMAKE_SKIP_BUILD_RPATH FALSE)

# Use conda/micromamba prefix automatically if present
if(DEFINED ENV{CONDA_PREFIX})
  list(PREPEND CMAKE_PREFIX_PATH "$ENV{CONDA_PREFIX}")
  list(APPEND CMAKE_BUILD_RPATH "$ENV{CONDA_PREFIX}/lib")
  list(APPEND CMAKE_INSTALL_RPATH "$ENV{CONDA_PREFIX}/lib")
  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)
  message(STATUS "Using conda prefix for RPATH: $ENV{CONDA_PREFIX}/lib")
endif()

# ============================================================
# Options
# ============================================================
option(BUILD_TESTING     "Build tests"              ON)
option(BEDROCK_USE_VTK   "Build Bedrock with VTK"   OFF)

# ============================================================
# === OpenCASCADE (OCCT) Detection & Link ===
# ============================================================
set(OCCT_ROOT_HINTS
  $ENV{CONDA_PREFIX}
  $ENV{OCCT_ROOT}
  /usr /usr/local /opt/opencascade
)

find_path(OCCT_INCLUDE_DIR
  NAMES Standard_Version.hxx
  PATH_SUFFIXES include/opencascade include
  PATHS ${OCCT_ROOT_HINTS}
  DOC "OpenCASCADE include directory"
)

find_path(OCCT_LIBRARY_DIR
  NAMES libTKernel.so libTKernel.dylib TKernel.lib
  PATH_SUFFIXES lib lib64
  PATHS ${OCCT_ROOT_HINTS}
  DOC "OpenCASCADE library directory"
)

if(NOT OCCT_INCLUDE_DIR OR NOT OCCT_LIBRARY_DIR)
  message(FATAL_ERROR 
    "OpenCASCADE not found. Set CONDA_PREFIX or OCCT_ROOT environment variable.\n"
    "Searched paths: ${OCCT_ROOT_HINTS}")
endif()

message(STATUS "Found OCCT include: ${OCCT_INCLUDE_DIR}")
message(STATUS "Found OCCT library: ${OCCT_LIBRARY_DIR}")

# Extract version (optional)
if(EXISTS "${OCCT_INCLUDE_DIR}/Standard_Version.hxx")
  file(STRINGS "${OCCT_INCLUDE_DIR}/Standard_Version.hxx" 
       OCCT_VERSION_LINE REGEX "^#define OCC_VERSION_COMPLETE")
  if(OCCT_VERSION_LINE)
    string(REGEX REPLACE ".*\"([0-9]+\\.[0-9]+\\.[0-9]+)\".*" "\\1" 
           OCCT_VERSION "${OCCT_VERSION_LINE}")
    message(STATUS "OCCT version: ${OCCT_VERSION}")
  endif()
endif()

# Core libraries in dependency order
set(OCCT_LIBS
  # Foundation
  TKernel TKMath
  # Modeling Data
  TKG2d TKG3d TKGeomBase TKBRep
  # Modeling Algorithms
  TKGeomAlgo TKTopAlgo TKPrim TKBO TKShHealing
  # Data Exchange
  TKXSBase TKSTEPBase TKSTEPAttr TKSTEP TKSTEP209
)

unset(OCCT_LIBRARIES)
foreach(lib ${OCCT_LIBS})
  find_library(${lib}_LIB 
    NAMES ${lib}
    PATHS ${OCCT_LIBRARY_DIR}
    NO_DEFAULT_PATH
  )
  if(NOT ${lib}_LIB)
    message(FATAL_ERROR "Required OCCT library ${lib} not found in ${OCCT_LIBRARY_DIR}")
  endif()
  list(APPEND OCCT_LIBRARIES ${${lib}_LIB})
  unset(${lib}_LIB CACHE)
endforeach()

# Create imported target
add_library(OpenCASCADE::OpenCASCADE INTERFACE IMPORTED)
target_include_directories(OpenCASCADE::OpenCASCADE 
  INTERFACE ${OCCT_INCLUDE_DIR})
target_link_libraries(OpenCASCADE::OpenCASCADE 
  INTERFACE ${OCCT_LIBRARIES})
set_target_properties(OpenCASCADE::OpenCASCADE PROPERTIES
  INTERFACE_LINK_DIRECTORIES "${OCCT_LIBRARY_DIR}"
)

# ============================================================
# Core Library & Modules
# ============================================================
add_subdirectory(core)

if(BUILD_TESTING)
  include(CTest)
  enable_testing()
  add_subdirectory(tests)
endif()

# ============================================================
# SOM header-only interface
# ============================================================
add_library(bedrock_som INTERFACE)
target_include_directories(bedrock_som
  INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/include)

# ============================================================
# Geometry (OCCT) library
# ============================================================
add_library(bedrock_geom
  include/bedrock/geom/step_export.hpp
  src/geom/step_export.cpp)

target_include_directories(bedrock_geom
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include)

target_link_libraries(bedrock_geom
  PUBLIC
    bedrock_som
    OpenCASCADE::OpenCASCADE)

# ============================================================
# Engine library
# ============================================================
add_library(bedrock_engine
  include/bedrock/engine.hpp
  src/engine/engine.cpp)

target_include_directories(bedrock_engine PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/include)

target_link_libraries(bedrock_engine PUBLIC bedrock_geom)

# ============================================================
# Smoke executable
# ============================================================
add_executable(bedrock_smoke_step tests/smoke_step_main.cpp)
target_link_libraries(bedrock_smoke_step PRIVATE bedrock_engine)

# RPATH so runtime finds OCCT libs (explicit per-target)
set_target_properties(bedrock_smoke_step PROPERTIES
  BUILD_RPATH "${OCCT_LIBRARY_DIR}"
  INSTALL_RPATH "${OCCT_LIBRARY_DIR}"
  INSTALL_RPATH_USE_LINK_PATH ON
)
